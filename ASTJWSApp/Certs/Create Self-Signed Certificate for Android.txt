1. CREATE PRIVATE KEYS
openssl genrsa -des3 -out key.pem 2048

2. CREATE SELF-SIGNED CERTIFICATES (365 *25 days)
openssl req -new -x509 -key key.pem -out client.pem -days 9125

3. COMBINE KEYS AND CERTIFICATES
openssl pkcs12 -export -out client.p12 -inkey key.pem -in client.pem
openssl pkcs12 -export -out client.pfx -inkey key.pem -in client.pem

4. GENERATE .BKS FILE FOR ANDROID (use the portecle tool to convert .bks file.)
java -jar portecle.jar
Then follow instructions to convert to .bks file.

4. CREATE TRUST STORES (Here use the portecle tool to convert .bks file.)
keytool \
      -import \
      -v \
      -trustcacerts \
      -alias 0 \
      -file <(openssl x509 -in client.pem) \
      -keystore client.bks \
      -storetype BKS \
      -provider org.bouncycastle.jce.provider.BouncyCastleProvider \
      -providerpath ./bcprov-jdk15on-159.jar \
      -storepass password
     


openssl x509 -in client.pem -text -noout
openssl x509 -in server.pem -text -noout

==========================================================================================================================================
Using shell, create a key using keytool:
keytool -genkey -keystore serverkeystore -keyalg rsa -alias serverkeystore

keytool -importkeystore -srckeystore serverkeystore -destkeystore serverkeystore.pkcs12 -deststoretype pkcs12

openssl pkcs12 -in serverkeystore.pkcs12 -clcerts -nokeys -out serverkeystore.crt

openssl x509 -in serverkeystore.crt -text -noout

==========================================================================================================================================
-REF -
http://www.gtopia.org/blog/2010/02/der-vs-crt-vs-cer-vs-pem-certificates/

DER VS. CRT VS. CER VS. PEM CERTIFICATES
Home / Tech / Public Key Infrastructure ( PKI ) / DER vs. CRT vs. CER vs. PEM Certificates
Certificates and Encodings
At its core an X.509 certificate is a digital document that has been encoded and/or digitally signed according to RFC 5280.

In fact, the term X.509 certificate usually refers to the IETF’s PKIX Certificate and CRL Profile of the X.509 v3 certificate standard, as specified in RFC 5280, commonly referred to as PKIX for Public Key Infrastructure (X.509).

X509 File Extensions
The first thing we have to understand is what each type of file extension is.   There is a lot of confusion about what DER, PEM, CRT, and CER are and many have incorrectly said that they are all interchangeable.  While in certain cases some can be interchanged the best practice is to identify how your certificate is encoded and then label it correctly.  Correctly labeled certificates will be much easier to manipulat

Encodings (also used as extensions)
.DER = The DER extension is used for binary DER encoded certificates. These files may also bear the CER or the CRT extension.   Proper English usage would be “I have a DER encoded certificate” not “I have a DER certificate”.
.PEM = The PEM extension is used for different types of X.509v3 files which contain ASCII (Base64) armored data prefixed with a “—– BEGIN …” line.
Common Extensions
.CRT = The CRT extension is used for certificates. The certificates may be encoded as binary DER or as ASCII PEM. The CER and CRT extensions are nearly synonymous.  Most common among *nix systems
CER = alternate form of .crt (Microsoft Convention) You can use MS to convert .crt to .cer (.both DER encoded .cer, or base64[PEM] encoded .cer)  The .cer file extension is also recognized by IE as a command to run a MS cryptoAPI command (specifically rundll32.exe cryptext.dll,CryptExtOpenCER) which displays a dialogue for importing and/or viewing certificate contents.
.KEY = The KEY extension is used both for public and private PKCS#8 keys. The keys may be encoded as binary DER or as ASCII PEM.
The only time CRT and CER can safely be interchanged is when the encoding type can be identical.  (ie  PEM encoded CRT = PEM encoded CER)

Common OpenSSL Certificate Manipulations
There are four basic types of certificate manipulations. View, Transform, Combination , and Extraction

View
Even though PEM encoded certificates are ASCII they are not human readable.  Here are some commands that will let you output the contents of a certificate in human readable form;

View PEM encoded certificate
Use the command that has the extension of your certificate replacing cert.xxx with the name of your certificate
openssl x509 -in cert.pem -text -noout
openssl x509 -in cert.cer -text -noout
openssl x509 -in cert.crt -text -noout

View DER encoded Certificate
openssl x509 -in certificate.der -inform der -text -noout


Transform
Transforms can take one type of encoded certificate to another. (ie. PEM To DER conversion)

PEM to DER
openssl x509 -in cert.crt -outform der -out cert.der
openssl x509 -in cert.crt -outform der -out cert.der

DER to PEM
openssl x509 -in cert.crt -inform der -outform pem -out cert.pem
openssl x509 -in cert.crt -inform der -outform pem -out cert.pem

Combination
In some cases it is advantageous to combine multiple pieces of the X.509 infrastructure into a single file.  One common example would be to combine both the private key and public key into the same certificate.
The easiest way to combine certs keys and chains is to convert each to a PEM encoded certificate then simple copy the contents of each file into a new file.   This is suitable for combining files to use in applications lie Apache.

Extraction
Some certs will come in a combined form.  Where one file can contain any one of: Certificate, Private Key, Public Key, Signed Certificate, Certificate Authority (CA), and/or Authority Chain.